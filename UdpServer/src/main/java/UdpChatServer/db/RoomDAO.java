package UdpChatServer.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Data Access Object for Room related operations.
 */
public class RoomDAO {

    private static final Logger log = LoggerFactory.getLogger(RoomDAO.class);

    /**
     * Creates a new room in the database if it doesn't exist.
     *
     * @param roomId The unique ID for the room (potentially generated by RoomManager.generateRoomId).
     * @return true if the room was created successfully or already existed, false on error.
     */
    public boolean createRoomIfNotExists(String roomId) {
        if (roomId == null || roomId.trim().isEmpty()) {
            log.warn("Attempted to create room with null or empty ID.");
            return false;
        }
        // Check if room exists first (optional, INSERT IGNORE can handle it too)
        // if (roomExists(roomId)) {
        //     log.info("Room '{}' already exists in DB.", roomId);
        //     return true;
        // }

        // Use INSERT IGNORE to avoid errors if the room already exists
        String sql = "INSERT IGNORE INTO rooms (room_id) VALUES (?)";
        try (Connection conn = DatabaseConnectionManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, roomId);
            int affectedRows = pstmt.executeUpdate();

            if (affectedRows > 0) {
                log.info("Room '{}' created successfully in DB.", roomId);
            } else {
                // This means the room likely already existed due to INSERT IGNORE
                log.info("Room '{}' already exists or insert was ignored.", roomId);
            }
            return true; // Return true if created or already exists

        } catch (SQLException e) {
            log.error("SQL error while creating room '{}': {}", roomId, e.getMessage(), e);
            return false;
        } catch (Exception e) {
            log.error("Unexpected error while creating room '{}': {}", roomId, e.getMessage(), e);
            return false;
        }
    }

     /**
     * Adds a participant to a room in the database.
     * Assumes the room already exists (call createRoomIfNotExists first if needed).
     *
     * @param roomId The ID of the room.
     * @param chatid The ID of the participant to add.
     * @return true if the participant was added successfully or already existed, false on error.
     */
    public boolean addParticipantToRoom(String roomId, String chatid) {
        if (roomId == null || roomId.trim().isEmpty() || chatid == null || chatid.trim().isEmpty()) {
            log.warn("Attempted to add participant with invalid input (roomId: {}, chatid: {})", roomId, chatid);
            return false;
        }

        // Use INSERT IGNORE to avoid errors if the participant is already in the room
        String sql = "INSERT IGNORE INTO room_participants (room_id, chatid) VALUES (?, ?)";
        try (Connection conn = DatabaseConnectionManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, roomId);
            pstmt.setString(2, chatid);
            int affectedRows = pstmt.executeUpdate();

             if (affectedRows > 0) {
                log.info("Participant '{}' added to room '{}' in DB.", chatid, roomId);
            } else {
                log.info("Participant '{}' already in room '{}' or insert was ignored.", chatid, roomId);
            }
            return true; // Return true if added or already exists

        } catch (SQLException e) {
             // Check for foreign key constraint violation (e.g., room or user doesn't exist)
            if ("23000".equals(e.getSQLState())) {
                 log.warn("Failed to add participant '{}' to room '{}': Room or User does not exist.", chatid, roomId);
            } else {
                log.error("SQL error adding participant '{}' to room '{}': {}", chatid, roomId, e.getMessage(), e);
            }
            return false;
        } catch (Exception e) {
            log.error("Unexpected error adding participant '{}' to room '{}': {}", chatid, roomId, e.getMessage(), e);
            return false;
        }
    }

    /**
     * Checks if a specific user is a participant in a specific room in the database.
     *
     * @param roomId The ID of the room.
     * @param chatid The ID of the user.
     * @return true if the user is a participant, false otherwise or on error.
     */
    public boolean isUserInRoom(String roomId, String chatid) {
         if (roomId == null || chatid == null) return false;
         String sql = "SELECT 1 FROM room_participants WHERE room_id = ? AND chatid = ? LIMIT 1";
         try (Connection conn = DatabaseConnectionManager.getConnection();
              PreparedStatement pstmt = conn.prepareStatement(sql)) {
             pstmt.setString(1, roomId);
             pstmt.setString(2, chatid);
             try (ResultSet rs = pstmt.executeQuery()) {
                 return rs.next(); // Returns true if a row is found
             }
         } catch (SQLException e) {
             log.error("SQL error checking participation for user '{}' in room '{}': {}", chatid, roomId, e.getMessage(), e);
             return false;
         } catch (Exception e) {
            log.error("Unexpected error checking participation for user '{}' in room '{}': {}", chatid, roomId, e.getMessage(), e);
            return false;
        }
    }

    /**
     * Retrieves a list of room IDs that a specific user participates in.
     *
     * @param chatid The ID of the user.
     * @return A List of room IDs, or an empty list if none are found or on error.
     */
    public List<String> getRoomsByUser(String chatid) {
        if (chatid == null) return Collections.emptyList();
        List<String> roomIds = new ArrayList<>();
        String sql = "SELECT room_id FROM room_participants WHERE chatid = ?";
        try (Connection conn = DatabaseConnectionManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, chatid);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    roomIds.add(rs.getString("room_id"));
                }
            }
        } catch (SQLException e) {
            log.error("SQL error retrieving rooms for user '{}': {}", chatid, e.getMessage(), e);
            // Return empty list on error to avoid breaking callers
        } catch (Exception e) {
            log.error("Unexpected error retrieving rooms for user '{}': {}", chatid, e.getMessage(), e);
        }
        return roomIds;
    }

     /**
     * Retrieves all participants for a given room from the database.
     *
     * @param roomId The ID of the room.
     * @return A Set of participant chat IDs, or an empty set if none are found or on error.
     */
    public Set<String> getParticipantsInRoom(String roomId) {
        if (roomId == null) return Collections.emptySet();
        Set<String> participants = new HashSet<>();
        String sql = "SELECT chatid FROM room_participants WHERE room_id = ?";
        try (Connection conn = DatabaseConnectionManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, roomId);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    participants.add(rs.getString("chatid"));
                }
            }
        } catch (SQLException e) {
            log.error("SQL error retrieving participants for room '{}': {}", roomId, e.getMessage(), e);
        } catch (Exception e) {
            log.error("Unexpected error retrieving participants for room '{}': {}", roomId, e.getMessage(), e);
        }
        return participants;
    }

    // Note: getRoomIdByParticipants(Set<String> chatids) is complex with pure SQL
    // if you need rooms with *exactly* those participants and no others.
    // It's often easier to generate the ID using RoomManager.generateRoomId()
    // and then check if that room exists using a simple query.

    /**
     * Checks if a room with the given ID exists in the database.
     *
     * @param roomId The room ID to check.
     * @return true if the room exists, false otherwise or on error.
     */
    public boolean roomExists(String roomId) {
        if (roomId == null) return false;
        String sql = "SELECT 1 FROM rooms WHERE room_id = ? LIMIT 1";
        try (Connection conn = DatabaseConnectionManager.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, roomId);
            try (ResultSet rs = pstmt.executeQuery()) {
                return rs.next();
            }
        } catch (SQLException e) {
            log.error("SQL error checking existence for room '{}': {}", roomId, e.getMessage(), e);
            return false;
        } catch (Exception e) {
            log.error("Unexpected error checking existence for room '{}': {}", roomId, e.getMessage(), e);
            return false;
        }
    }
}
